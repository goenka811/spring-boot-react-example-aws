Design:

1. Its just the forked repository from the orginal assignment one.. in my gitlab workspace goenka811..
Once we have the below config files from this workspace.. the same can be deployed in your own cloud environment..

2. Used terraform for buiding IAAC and Gitlab for pipeline automation / Gcloud for kubernetes deployment..

3. Just 2 variables in secret registry (password for docker repos and key for gcloud)

Below are the Dev/configuration steps:

1. Terraform infra creation scripts still need to be run on gcloud CLI as terraform apply..
2. Once the cluster / nodes are created pipeline can be executed via gitlab..
3. First task completes the maven build of the app and produces the jar..
4. Second task converts the Jar in image / tags and pushes that to docker repository..
5. Third task gets the image from docker repository and deploys the same in gcloud cluster made in step 1.
6. Once the pods have the apps deployed we can expose the deployment to access the same via gcloud interface 
and get the public IP address for the same.
7. Monitoring and Auditing of the application can be done via gcloud console only as well as autoscaling 
steps can be added.. or for ex the below command:
kubectl autoscale deployment spring-boot-react-example --cpu-percent=60 --min=1 --max=10 
etc..

App can be accessed using load balanced public IP : http://34.88.65.109:8080/login
Once anything is changed in Repo then the deployment will trigger automatically and we should be able to see the changes in sometime on above URL..

To detroy the app.. we can just remove the deployments and then terraform destroy to delete the cloud infra..
Apologies dont have the time to change the app itself to use RDB.. 

Was working on automating the CI/CD pipeline with terraform as well.. however was having security/runner issue in running the same..
Will keep checking and update if/once the same is working..
